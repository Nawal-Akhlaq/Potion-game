#include <iostream>
#include <pthread.h>
#include <semaphore.h>
#include <cstdlib>
#include <random>
#include <chrono>
#include <unistd.h> // for usleep

using namespace std;

const int row = 5;
const int col = 5;
int Ingcount = 0;

sem_t globalSemaphore; // Single global semaphore


char disp[row][col];
void InitializeDispenser()
{	
	char ing[4] = {'R', 'Y', 'b', 'B'};
	std::random_device rd;
	std::mt19937 generator(rd());
	std::uniform_int_distribution<> dis(0, 3);
	
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			disp[i][j] = ing[dis(generator)];
		}
	}
}
class Dispenser
{
	char prev;
	char selectedIngredients[row * col];
public:
	Dispenser(){}

	void DispenserDisplay() 
	{
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				cout << disp[i][j] << "\t";
			}
			cout << endl;
		}
	}
	char* SelectIng(int x,int y) 
	{
		if(validIng(x,y))
		{
			selectedIngredients[Ingcount] = disp[x][y];
			prev = disp[x][y];
			disp[x][y] = '-';
			RollBack();
			Ingcount++;
			checkExplosion(x,y);
			return selectedIngredients;
		}
	}
	void RollBack()
	{
		for (int i = 0; i < row-1; i++)
		{
			for (int j = 0; j < col; j++)
			{
				if (disp[i][j] == '-')
				{
					int temp = disp[i][j];
					disp[i][j] = disp[i + 1][j];
					disp[i + 1][j] = temp;
				}
			}
		}
	}
	void checkExplosion(int x, int y) 
	{
		if (disp[x][y] == '-')
		{
			return;
		}
		else if (x > 0 && x < 4) {
			if (disp[x][y] == disp[x + 1][y])
			{

				SelectIng(x + 1, y);
			}
			if (disp[x][y] == disp[x - 1][y])
			{
				SelectIng(x - 1,y);
			}
			if (disp[x][y] == prev)
			{
				SelectIng(x,y);
			}
		}
		else if (x == 0 && disp[x][y] == prev)
		{
			SelectIng(x, y);
		}
		else
		{
			return;
		}
	}
	void returnToDispenser(char *ingredientSelected)
	{
		while (Ingcount > 0)
		{
			int tempx = rand() % 5;
			int tempy = rand() % 5;
			if (disp[tempx][tempy] == '-')
			{
				disp[tempx][tempy] = ingredientSelected[Ingcount-1];
				Ingcount--;
				RollBack();
			}
		}
	}
	bool validIng(int x,int y)
	{
		if(disp[x][y] == 'B' || disp[x][y] == 'b' || disp[x][y] == 'R' || disp[x][y] == 'Y')
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	void FillDispenser()
	{
		char Ing[4]={'B','R','b','Y'};
		std::random_device rd;
		std::mt19937 generator(rd());
		std::uniform_int_distribution<> dis(0, 3);
		for(int i = 0 ; i < row ; i++)
		{
			for(int j = 0 ; j < col ; j++)
			{
				if(disp[i][j] =='-')
				{
					int tempx = rand() % 4;
					disp[i][j] = Ing[dis(generator)];
				}
			}
		}
	}
};



struct Styles
{
	int black = 0;
	int red = 0;
	int blue = 0;
	int yellow = 0;
	int score = 0;
};

class potionTiles
{
	Styles *Sty;
	Styles CompletedPotion[5];
	int potionRec[5] = {0, 0, 0, 0, 0};
	Styles *selected;
	int CompletedCount = 0;
	int SCORE=0;
public:
	int potionCount = -1;

	potionTiles()
	{
		Sty = new Styles[5];
		Sty[0].black = 3, Sty[0].blue = 1, Sty[0].red = 0, Sty[0].yellow = 2, Sty[0].score = 15;
		Sty[1].black = 0, Sty[1].blue = 1, Sty[1].red = 2, Sty[1].yellow = 1, Sty[1].score = 5;
		Sty[2].black = 2, Sty[2].blue = 0, Sty[2].red = 1, Sty[2].yellow = 2, Sty[2].score = 10;
		Sty[3].black = 2, Sty[3].blue = 2, Sty[3].red = 0, Sty[3].yellow = 0, Sty[3].score = 5;
		Sty[4].black = 0, Sty[4].blue = 1, Sty[4].red = 2, Sty[4].yellow = 2, Sty[4].score = 10;
		selected = new Styles[2];
	}
	int getCompletedCount()
	{
		return CompletedCount;
	}
	void DisplayAllPotion()
	{
		cout << "All 5 styles are : \n";
		for (int i = 0; i < 5; i++)
		{
			cout << "Style " << i + 1 << " : " << "\tblack : " << Sty[i].black << "\tblue : " << Sty[i].blue 
				<< "\tRed : " << Sty[i].red << "\tYellow : " << Sty[i].yellow << endl;
		}
	}

	void placePotionTiles()
	{
		if (potionCount >= 1)
		{
			cout << "No more potion tiles can be placed"<<endl;
			return;
		}
		else
		{
			DisplayAllPotion();
			int choice = 0;
			while (1)
			{
				cout << "Enter your choice : ";
				cin >> choice;
				if (choice > 0 && choice < 6)
				{
					cout << "That's a valid choice."<<endl;
					potionCount++;
					potionRec[choice - 1] = 1;
					return;
				}
				else
				{
					cout << "Invalid choice"<<endl;
				}
			}
		}
	}
	int getScore()
	{
		return SCORE;
	}
	bool CompletedPotions()
	{
		bool flag = false;
		for (int i = 0, j = 0; i < row && j < 2; i++)
		{
			if (selected[j].black == Sty[i].black && selected[j].blue == Sty[i].blue && selected[j].red == Sty[i].red && selected[j].yellow == Sty[i].yellow)
			{
				SCORE = SCORE + Sty[i].score;
				CompletedPotion[CompletedCount] = selected[j];
				selected[j].black=0 , selected[j].blue=0 , selected[j].red=0 , selected[j].yellow=0;
				potionRec[i] = 0;
				potionCount--;
				j++;
				i = 0;
				CompletedCount++;
				flag = true;
				break;
			}
		}
		return flag;
	}

	bool placeIng(char ingredientSelected)
	{
		int ingredients[4];
		cout << "Place ingredients on previously selected potion tiles or place them in flask.";
		cout << "\n Presiously selected potions are : \n";
		int j = 1;
		for (int i = 0; i < 5; i++)
		{
			if (potionRec[i] == 1)
			{
				cout << "Choice : " << j << endl;
				cout << "Style " << i + 1 << " : " << "\tblack : " << Sty[i].black << "\tblue : " << Sty[i].blue 
					<< "\tRed : " << Sty[i].red << "\tYellow : " << Sty[i].yellow << endl;
				j++;
			}
		}
		if (j == 1)
		{
			cout << "Choice 2 == Choice 1" << endl;
		}
		int temp;
		while (1)
		{
			cout << "Enter your choice ( 1 or 2 ) : ";
			cin >> temp;
			if (temp == 1 or temp == 2)
				break;
			else
				cout << "Invalid choice"<<endl;
		}
		bool flag = false;
		int check = -1;
		for (int i = 0; i < row; i++)
		{
			if (potionRec[i] == 1)
			{
				check++;
				if (check == temp - 1)
				{
					if (selected[temp - 1].black < Sty[i].black)
					{
						if (ingredientSelected == 'B')
						{
							selected[temp - 1].black++;
							cout << "Ingredient is placed on potion tile" << endl;
							flag = true;
						}
					}
					if (selected[temp - 1].blue < Sty[i].blue)
					{
						if (ingredientSelected == 'b')
						{
							selected[temp - 1].blue++;
							cout << "Ingredient is placed on potion tile" << endl;
							flag = true;
						}
					}
					if (selected[temp - 1].red < Sty[i].red)
					{
						if (ingredientSelected == 'R')
						{
							selected[temp - 1].red++;
							cout << "Ingredient is placed on potion tile" << endl;
							flag = true;
						}
					}
					if (selected[temp - 1].yellow < Sty[i].yellow)
					{
						if (ingredientSelected == 'Y')
						{
							selected[temp - 1].yellow++;
							cout << "Ingredient is placed on potion tile" << endl;
							flag = true;
						}
					}
				}
			}
		}
		for (int i = 0, j = 0; i < 5; i++)
		{
			if (potionRec[i] == 1)
			{
				cout << "Ingredients need to complete Choice " << j + 1 << " : ";
				cout << "Style " << i + 1 << " : " << "\tblack : " << Sty[i].black - selected[j].black << "\tblue : " << Sty[i].blue - selected[j].blue 
					<< "\tRed : " << Sty[i].red - selected[j].red	<< "\tYellow : " << Sty[i].yellow - selected[j].yellow << endl;
				j++;
			}
		}
		if (flag == false)
		{
			cout << "Sorry Ingredient can't be placed on selected potion tile" << endl;
		}
		return flag;
	}
};



class flask
{
	char ing[3];
	int count = 0;
public:
	flask() 
	{
		for(int i = 0 ; i < 3 ; i++)
		{	
			ing[i]='-';
		}
	}

	bool placeInFlask(char ingredient)
	{
		if (count < 3)
		{
			ing[count] = ingredient;
			count++;
			cout << "Ingredient placed in Flask."<<endl;
			return true;
		}
		else
		{
			cout << "Sorry! No more ingredients can be placed in Flask."<<endl;
			return false;
		}
	}

	void DisplayFlask()
	{
		for (int i = 0; i < 3; i++)
		{
			cout << i << ". " << ing[i] << endl;
		}
	}
	char SelectIngFromFlask(int x)
	{
		if(x < 3 && x > -1)
		{
			if(ing[x] == '-')
			{
				cout << "No ingredient found at location" << endl;
				return '-';
			}
			char tempchar = ing[x];
			ing[x]='-';
			count--;
			for(int i = x ; i < 2 ; i++)
			{
				swap(ing[i],ing[i+1]);
			}
			return tempchar;
		}
	}
};

// Gameboard class
class Gameboard
{
	Dispenser D;
	potionTiles Tiles;
	flask Extra;
	char *ingredientSelected;
public:
	pthread_t playerThread;
	int playerId; // Player ID (1 or 2)

	Gameboard(int id) : playerId(id) {}

	void playerAction()
	{
		while (true)
		{
			sem_wait(&globalSemaphore); // Acquire the global semaphore
			cout << "Player " << playerId << "'s turn completed.: " << Tiles.getCompletedCount() << endl;
			cout << "Score is : " << Tiles.getScore() << endl;
			if (Tiles.potionCount == 1)
			{
				if (Tiles.CompletedPotions())
				{
					if (checkWin())
					{
						cout << "Player " << playerId << " wins!" << endl;
						sem_post(&globalSemaphore); // Release the global semaphore before exiting
						return; // Player has won, exit the player's turn
					}
 				Tiles.placePotionTiles();
				}
				else
				{
					int x, y;
					D.DispenserDisplay();
					while(1)
					{
						cout << "Player " << playerId << "'s turn. Enter (x,y): ";
						cin >> x >> y;
						if(D.validIng(x,y))
						{
							break;
						}
					}
					ingredientSelected = D.SelectIng(x, y);
					D.DispenserDisplay();
					int select;
					int choice;
					while (Ingcount != 0)
					{    
						cout << "\n1. Place.\n2. Return to Dispenser.\nYou want to place ingredients or return remaining ingredients: ";
						cin >> choice;                
						if (choice == 1)
						{
							for (int i = 0; i < Ingcount; i++)
							{
								cout << i << "." << ingredientSelected[i] << endl;
							}
							cout << "\nEnter selected ingredient (example: 1): ";
							cin >> select;
							int temp;
							cout << "\n1. Place on potion Tile.\n2. Place in flask.\n3. Choose from flask\nEnter your choice : ";
							cin >> temp;
							if (temp == 1)
							{
								if (Tiles.placeIng(ingredientSelected[select]))
								{
									ingredientSelected[select] = '-';
									for (int i = 0; i < row - 1; i++)
									{
										if (ingredientSelected[i] == '-')
										{
											char temp = ingredientSelected[i];
											ingredientSelected[i] = ingredientSelected[i + 1];
											ingredientSelected[i + 1] = temp;
										}
									}
								Ingcount--;
								}
							}
							else if (temp == 2)
							{
								if (Extra.placeInFlask(ingredientSelected[select]))
								{
									ingredientSelected[select] = '-';
									for (int i = 0; i < row - 1; i++)
									{
										if (ingredientSelected[i] == '-')
										{
											char temp = ingredientSelected[i];
											ingredientSelected[i] = ingredientSelected[i + 1];
											ingredientSelected[i + 1] = temp;
										}
									}
								Ingcount--;
								}
							}
							else if (temp == 3)
							{
								int x;
								Extra.DisplayFlask();
								cout << "Enter ingredient : ";
								cin >> x;
								char flaskIng=Extra.SelectIngFromFlask(x);
								if(flaskIng == 'B' || flaskIng == 'b' || flaskIng == 'R' || flaskIng == 'Y')
								{
									Ingcount++;
									ingredientSelected[Ingcount] = flaskIng;
								}
							}
						}
						else if (choice == 2)
						{
							D.returnToDispenser(ingredientSelected);
						}
					}
				}
			}
			else	
			{
				Tiles.placePotionTiles();
			}
			D.FillDispenser();
			sem_post(&globalSemaphore); // Release the global semaphore
		
			// Check if the turn conditions are met (ingredients placed in flask or on tiles, or a potion tile selected)
			if (Tiles.potionCount == 1 || Ingcount == 0)
			{
				break; // Exit the player's turn
			}
		}
	}
	bool checkWin()
	{
		if(Tiles.getCompletedCount()>=5)
			return true;
		else
			return false;
	}
	static void *playerActionWrapper(void *arg)
	{
		Gameboard *gameboard = static_cast<Gameboard *>(arg);
		gameboard->playerAction();
		return nullptr;
	}
};


int main()
{
	unsigned seed = chrono::system_clock::now().time_since_epoch().count();
	default_random_engine generator(seed);
	srand(time(nullptr)); // Seed for random number generation
	InitializeDispenser();
	// Create two Gameboard instances, each representing a player
	Gameboard player1(1);
	Gameboard player2(2);

	sem_init(&globalSemaphore, 0, 1); // Initialize the global semaphore

	// Create the threads for each player
	pthread_create(&player1.playerThread, nullptr, &Gameboard::playerActionWrapper, &player1);
	pthread_create(&player2.playerThread, nullptr, &Gameboard::playerActionWrapper, &player2);

	// Use a loop to keep calling playerAction until a player wins
	while (true)
	{
		// Wait for both players to finish their turns
		pthread_join(player1.playerThread, nullptr);
		pthread_join(player2.playerThread, nullptr);

		// Check if either player has won
		if (player1.checkWin() || player2.checkWin())
		{
			break; // Exit the loop if a player has won
		}

		// Create the threads for each player again
		pthread_create(&player1.playerThread, nullptr, &Gameboard::playerActionWrapper, &player1);
		pthread_create(&player2.playerThread, nullptr, &Gameboard::playerActionWrapper, &player2);
	}
	sem_destroy(&globalSemaphore); // Destroy the global semaphore

	return 0;
}
